html, body {
    /* Must be set to allow min-height for the content. */
    height: 100%;
}

body {
    /* To not have the content flicker on page change. */
    overflow-y: scroll;
    /* Keep some reasonable min width for smartphones. */
    min-width: 480px;
}

h1 {
    /* The surrounding container already defines a fixed padding for all sides. */
    margin-top: 0;
}

a {
    text-decoration: none;
}

nav {
    /* The main navigation is always visible at the top of the page. */
    position: sticky;
    top: 0;
    height: 60px;
    /* To ensure it is on top of all elements. */
    z-index: 10000;
    background: white;
    /* Indicate on-top-position by a shadow. */
    box-shadow: 0 2px 4px lightgray;
}

/* Do not use the real body, to not accidentally apply styles to temporary injected elements. */
.body {
    /* Allow the element to create a scroll but propagate the 100% height to the container inside. */
    min-height: 100%;
    /* This allows setting the inner container to always at least full browser height. */
    display: flex;
    flex-direction: column;
}

/* Define a max content width and center the content. Use the inner menu, to not have it affect the background color. */
.menu, .container {
    max-width: 1200px;
    margin: 0 auto;
    box-sizing: border-box;
}

.menu {
    /* Use less padding since the buttons inside the navigation do provide extra padding on their own. */
    padding: 20px 30px;
    text-align: right;
}

.container {
    padding: 40px;
    /* Due to the display flex on the parent, the width must be explicitly reset to full width. */
    width: 100%;
    /* Let the content at least grow to full browser height. */
    flex: 1 0 auto;
    min-height: 100%;
    /* Indicate the max-width with a shadow to the left and right. */
    box-shadow: 0 0 4px lightgray;
}

/* The page rendering never removes pages to not have render dependencies. To avoid positioning hide the pages. */
.container > * {
    display: none;
}

/* The currently active page is always injected to the end of the container. */
.container > *:last-child {
    display: block;
}
